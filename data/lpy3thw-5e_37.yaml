- en: Exercise 34. While Loops
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 34. While 循环
- en: Now to totally blow your mind with a new loop, the `while-loop`. A `while-loop`
    will keep executing the code block under it as long as a Boolean expression is
    `True`.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们用一个新的循环完全震惊你，`while-loop`。`while-loop`会持续执行其下的代码块，只要布尔表达式为`True`。
- en: Wait, you have been keeping up with the terminology, right? That if we write
    a line and end it with a `:` (colon), then that tells Python to start a new block
    of code? Then we indent, and that’s the new code. This is all about structuring
    your programs so that Python knows what you mean. If you do not get that idea,
    then go back and do some more work with `if`-statements, functions, and the `for`-loop
    until you get it.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 等等，你一直跟上术语了吗？如果我们写一行并以`:`（冒号）结尾，那告诉 Python 开始一个新的代码块？然后我们缩进，这就是新代码。这一切都是关于构建你的程序，让
    Python 知道你的意图。如果你没有理解这个概念，那就回去多做一些关于`if`语句、函数和`for`循环的工作，直到你理解为止。
- en: Later on we’ll have some exercises that will train your brain to read these
    structures, similar to how we burned Boolean expressions into your brain.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 后面我们会有一些练习，训练你的大脑阅读这些结构，类似于我们如何将布尔表达式烙印在你的大脑中。
- en: Back to `while-loops`. What they do is simply do a test like an `if`-statement,
    but instead of running the code block *once*, they jump back to the “top” where
    the `while` is, and repeat. A `while`-loop runs until the expression is `False`.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 回到`while-loop`。它们的作用就像一个`if`语句的测试，但不同于只运行代码块*一次*，它们会跳回到`while`所在的“顶部”，并重复。`while`循环会一直运行，直到表达式为`False`。
- en: 'Here’s the problem with `while`-loops: Sometimes they do not stop. This is
    great if your intention is to just keep looping until the end of the universe.
    Otherwise you almost always want your loops to end eventually.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '`while`循环的问题在于：有时它们不会停止。如果你的意图只是一直循环直到宇宙的尽头，那么这很好。否则，你几乎总是希望你的循环最终会结束。'
- en: 'To avoid these problems, there are some rules to follow:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免这些问题，有一些规则需要遵循：
- en: 1\. Make sure that you use `while`-loops sparingly. Usually a `for`-loop is
    better.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. 确保你谨慎使用`while`循环。通常`for`循环更好。
- en: 2\. Review your `while`-statements and make sure that the Boolean test will
    become `False` at some point.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. 检查你的`while`语句，并确保布尔测试最终会变为`False`。
- en: 3\. When in doubt, print out your test variable at the top and bottom of the
    `while`-loop to see what it’s doing.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. 如果有疑问，在`while`循环的顶部和底部打印出你的测试变量，看看它在做什么。
- en: 'In this exercise, you will learn the `while`-loop while doing these three checks:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你将学习`while`循环，并在进行以下三个检查时使用它们：
- en: 'Listing 34.1: ex34.py'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '列表 34.1: ex34.py'
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: What You Should See
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 你应该看到的结果
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`dis()` It'
  id: totrans-15
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`dis()`它'
- en: 'For our final “side quest” in The Game of Code you’ll use `dis()` to analyze
    how a `while-loop` works:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们代码之游戏的最终“支线任务”中，你将使用`dis()`来分析`while-loop`的工作原理：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You’ve already seen most of these byte codes, so it’s up to you to figure out
    how this `dis()` output relates to the Python. Remember you can look up all of
    the byte codes at [the end of the](https://docs.python.org/3/library/dis.xhtml#python-bytecode-instructions)
    `[dis()](https://docs.python.org/3/library/dis.xhtml#python-bytecode-instructions)`
    [documentation](https://docs.python.org/3/library/dis.xhtml#python-bytecode-instructions).
    Good luck!
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经看到了大部分这些字节码，所以现在轮到你去弄清楚这个`dis()`输出与 Python 有什么关系了。记住你可以在[文档的末尾](https://docs.python.org/3/library/dis.xhtml#python-bytecode-instructions)的`[dis()](https://docs.python.org/3/library/dis.xhtml#python-bytecode-instructions)`[文档](https://docs.python.org/3/library/dis.xhtml#python-bytecode-instructions)中查找所有的字节码。祝你好运！
- en: Study Drills
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 学习练习
- en: 1\. Convert this `while-loop` to a function that you can call, and replace `6`
    in the test (`i < 6`) with a variable.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. 将这个`while-loop`转换为一个可以调用的函数，并用一个变量替换测试中的`6`（`i < 6`）。
- en: 2\. Use this function to rewrite the script to try different numbers.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. 使用这个函数来重写脚本以尝试不同的数字。
- en: 3\. Add another variable to the function arguments that you can pass in that
    lets you change the `+ 1` on line 8 so you can change how much it increments by.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. 在函数参数中添加另一个变量，你可以传入它，以便你可以更改第 8 行的`+ 1`，这样你就可以改变增量是多少。
- en: 4\. Rewrite the script again to use this function to see what effect that has.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 4\. 再次重写脚本以使用这个函数，看看会有什么影响。
- en: 5\. Write it to use `for-loops` and `range`. Do you need the incrementor in
    the middle anymore? What happens if you do not get rid of it?
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 5\. 重写它以使用`for-loops`和`range`。你还需要在中间保留增量器吗？如果不去掉它会发生什么？
- en: If at any time that you are doing this it goes crazy (it probably will), just
    hold down `CTRL` and press `c` (`CTRL-c`) and the program will abort.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在任何时候你这样做时出现问题（很可能会），只需按住`CTRL`并按下`c`（`CTRL-c`），程序就会中止。
- en: Common Student Questions
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 常见学生问题
- en: '**What’s the difference between a** `for`**-loop and a** `while`**-loop?**
    A `for`-loop can only iterate (loop) “over” collections of things. A `while`-loop
    can do any kind of iteration (looping) you want. However, `while`-loops are harder
    to get right, and you normally can get many things done with `for`-loops.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**`for`**-循环和**`while`**-循环有什么区别？**`for`**-循环只能在“集合”上进行迭代（循环）。**`while`**-循环可以进行任何类型的迭代（循环）。然而，**`while`**-循环更难正确使用，通常可以用**`for`**-循环完成许多任务。'
- en: '**Loops are hard. How do I figure them out?** The main reason people don’t
    understand loops is because they can’t follow the “jumping” that the code does.
    When a loop runs, it goes through its block of code, and at the end it jumps back
    to the top. To visualize this, put `print` statements all over the loop printing
    out where in the loop Python is running and what the variables are set to at those
    points. Write `print` lines before the loop, at the top of the loop, in the middle,
    and at the bottom. Study the output and try to understand the jumping that’s going
    on.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**循环很难。我该如何理解它们？** 人们不理解循环的主要原因是因为他们无法跟随代码的“跳跃”。当循环运行时，它会执行其代码块，最后跳回顶部。为了可视化这一点，在循环中到处放置`print`语句，打印出Python在循环中运行的位置以及这些点上变量的设置。在循环之前、顶部、中间和底部编写`print`行。研究输出并尝试理解正在进行的跳跃。'
