- en: Exercise 36. Designing and Debugging
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习36. 设计和调试
- en: Now that you know `if`-statements, I’m going to give you some rules for `for`-loops
    and `while`-loops that will keep you out of trouble. I’m also going to give you
    some tips on debugging so that you can figure out problems with your program.
    Finally, you will design a little game similar to the previous exercise but with
    a slight twist.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了`if`语句，我将给你一些关于`for`循环和`while`循环的规则，这将帮助你避免麻烦。我还会给你一些关于调试的提示，这样你就可以找出程序中的问题。最后，你将设计一个类似于上一个练习但有些不同的小游戏。
- en: From Idea to Working Code
  id: totrans-2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从想法到可运行的代码
- en: There is a simple process anyone can follow to turn your idea into code. This
    isn’t the *only* process, but it is one that works well for many people. Use this
    until you develop your own personal process.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个简单的过程任何人都可以遵循，将你的想法转化为代码。这不是*唯一*的过程，但对许多人来说效果很好。在你开发自己的个人过程之前，使用这个过程。
- en: 1\. Get your idea out of your head in any form you understand. Are you a writer?
    Then write an essay about your idea. Are you an artist or designer? Then draw
    the user interface. Do you like charts and graphs? Check out the Sequence Diagram,
    which is one of the most useful diagrams in programming.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. 以你理解的任何形式将你的想法表达出来。你是作家吗？那就写一篇关于你的想法的文章。你是艺术家或设计师吗？那就画出用户界面。你喜欢图表吗？看看序列图，这是编程中最有用的图之一。
- en: 2\. Create a file for your code. Yes, believe it or not this is an important
    step that most people stumble over. If you can’t come up with a name, just pick
    a random one for now.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. 为你的代码创建一个文件。是的，信不信由你，这是一个重要的步骤，大多数人都会遇到困难。如果你想不出一个名字，就随便挑一个吧。
- en: 3\. Write a description of your idea as comments, in plain English language
    (or whatever language is easiest for you).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. 用简单的英语（或者你最容易理解的语言）写下你的想法的描述作为注释。
- en: 4\. Start at the top, and convert the first comment into “pseudo-code,” which
    is kind of Python but you don’t care about syntax.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 4\. 从顶部开始，将第一个注释转换为“伪代码”，这有点像Python，但你不用在意语法。
- en: 5\. Convert that “pseudo-code” into real Python code, and keep running your
    file until this code does what your comment says.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 5\. 将那个“伪代码”转换为真正的Python代码，并不断运行你的文件，直到这段代码实现了你的注释所说的。
- en: 6\. Repeat this until you’ve converted all of the comments into Python.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 6\. 重复这个过程，直到你将所有的注释转换为Python代码。
- en: '7\. Step back, review your code, and then *delete it*. You don’t have to do
    this all the time, but if you get in the habit of throwing away your first version,
    you’ll receive two benefits:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 7\. 退一步，审查你的代码，然后*删除它*。你不必一直这样做，但如果你养成丢弃第一个版本的习惯，你将获得两个好处：
- en: a. Your second version is almost always better than the first.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: a. 你的第二个版本几乎总是比第一个版本好。
- en: b. You confirm to yourself that it wasn’t just dumb luck. You actually can code.
    This helps with impostor syndrome and confidence.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: b. 你向自己确认这不仅仅是愚蠢的运气。你确实能编写代码。这有助于应对冒名顶替综合症和增强自信。
- en: 'Let’s do an example with a simple problem of “create a simple Fahrenheit to
    Celsius converter.” Step 1, I would write out what I know about the conversion:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用一个简单的问题“创建一个简单的华氏度到摄氏度转换器”来做一个例子。第一步，我会写出我对转换的了解：
- en: C equals (F - 32 ) / 1.8\. I should ask the user for the F and then print out
    the C.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: C 等于 (F - 32 ) / 1.8。我应该询问用户输入F，然后打印出C。
- en: 'A very basic math formula is an easy way to understand the problem. Step 2,
    I write comments describing what my code should do:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一个非常基本的数学公式是理解问题的简单方法。第二步，我写下描述我的代码应该做什么的注释：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Once I have that, I “fill in the blanks” with pseudo-code. I’ll do just the
    first line so you can finish this:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我有了这个，我会用伪代码“填空”。我只会做第一行，这样你就可以完成这个：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Notice I’m being sloppy and not getting the syntax right, which is the point
    of pseudo-code. Once I have that, convert it to correct Python:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我故意懒惰，没有正确地编写语法，这就是伪代码的要点。一旦我有了这个，就将其转换为正确的Python代码：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '*Run it!* You should be running your code constantly. If you type more than
    a few lines, just delete them and start over. It’s so much easier.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '*运行它！* 你应该不断地运行你的代码。如果你输入了超过几行，只需删除它们，重新开始。这样会容易得多。'
- en: Now that those lines work, I move on to the next comment and repeat the process
    until I have converted all of the comments into Python. When my script is finally
    working, I delete it and rewrite it using what I know. Maybe this time I just
    write the Python directly, or I just repeat the process again. Doing this will
    confirm to myself that I can actually do it. It was not just dumb luck.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在这些行起作用了，我继续下一个注释并重复这个过程，直到我将所有的注释转换成Python。当我的脚本最终工作时，我会删除它并使用我所知道的重新编写它。也许这一次我直接写Python，或者我再次重复这个过程。这样做会让我确认自己实际上是可以做到的。这不仅仅是愚蠢的运气。
- en: Is This a Professional Process?
  id: totrans-23
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 这是一个专业的过程吗？
- en: You may think that this process is not practical or unprofessional. I think
    when you’re starting out, you need different tools than someone who’s been coding
    for a really long time. I can sit down with an idea and just code, but I’ve been
    coding professionally for longer than you may have been alive. Yet, in my head
    this is essentially the process I follow. I’m just doing it inside my head rapidly,
    while you have to practice it externally until you internalize it.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会认为这个过程不实用或不专业。我认为，当你刚开始时，你需要不同于那些编程时间很长的人所需的工具。我可以坐下来想一个点子然后编码，但我已经从事专业编程的时间比你活了的时间还长。然而，在我的脑海中，这基本上是我遵循的过程。我只是在脑海中迅速地做这个过程，而你必须在外部练习直到内化。
- en: I do use this process when I am stuck, or if I’m learning a new language. If
    I don’t know a language but know what I want to do, then I can usually write comments
    and slowly convert them to code, which also teaches me that language. The only
    difference between me and you is that I do it faster because of years of training.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当我卡住或者在学习一门新语言时，我会使用这个过程。如果我不懂一门语言但知道我想做什么，那么我通常可以写注释然后慢慢将其转换为代码，这也教会我那种语言。我和你之间唯一的区别是，由于多年的训练，我做得更快。
- en: About the “X/Y” Non-Problem
  id: totrans-26
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 关于“X/Y”非问题
- en: Some professionals claim that this process gives students a strange disease
    called the “X/Y problem.” They describe the X/Y problem as “Someone wants to do
    X, but only knows how to do Y, so they ask for help on how to do Y.” The problem
    with the X/Y problem is it’s critical of people who are simply learning how to
    code and presents no solution. To the “X/Y hater” the solution seems to be “know
    the answer already,” since if they knew how to do X, they wouldn’t bother with
    Y. The hypocrisy of this belief is that all of the people who hate these kinds
    of questions also went through a period of doing exactly this and asking these
    same exact kinds of “X/Y” questions.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 一些专业人士声称，这个过程会让学生患上一种奇怪的疾病，称为“X/Y问题”。他们将X/Y问题描述为“有人想做X，但只知道如何做Y，所以他们请求帮助如何做Y。”
    X/Y问题的问题在于它批评了那些简单学习编程的人，并没有提出解决方案。对于“X/Y问题的讨厌者”，解决方案似乎是“已经知道答案”，因为如果他们知道如何做X，他们就不会去烦恼Y。这种信念的虚伪之处在于所有讨厌这种问题的人都经历过这个阶段，提出过这些完全相同的“X/Y”问题。
- en: 'The other problem is, they’re blaming *you* for their terrible documentation.
    The classic example is from the original description of the X/Y problem:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个问题是，他们在责备*你*的糟糕文档。经典的例子来自X/Y问题的原始描述：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: First off, this `feline` person is literally yelling at someone for asking a
    question in an IRC channel devoted to answering questions. “ASK FOR WHAT YOU WANT!”
    The second problem is, their solution is something I—a multi-decade veteran bash
    and Linux professional—has to look up *every single time*. It is one of the worst
    documented, least usable features in bash. How is a beginner expected to know
    ahead of time that they should use some complicated “dollar brace name pound pound
    asterisk dot brace” operation? This person most likely would not have asked this
    question had there been simple documentation available online that explained how
    to do this. Even better would be if bash actually just *had* a basic feature for
    this incredibly common operation every human needs out of a shell.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，这个`feline`人实际上在一个专门回答问题的IRC频道里大声责骂某人提问。“要求你想要的东西！”第二个问题是，他们的解决方案是我——一个有几十年经验的bash和Linux专业人士——每次都要查找的东西。这是bash中最糟糕文档化、最不可用的功能之一。一个初学者如何能预先知道他们应该使用一些复杂的“dollar
    brace name pound pound asterisk dot brace”操作？如果在线有简单的文档解释如何做这个操作，这个人很可能不会提出这个问题。如果bash实际上*有*一个基本功能来执行这个每个人都需要的非常常见的操作，那将更好。
- en: When it comes to the “X/Y problem,” it is really just an excuse to yell at beginners
    for being beginners. Every single person who claims to hate this either doesn’t
    actually write code or has *definitely* done exactly this while they were learning
    to code. That’s *how* you learn to code. You come up with problems and stumble
    through them learning how to implement solutions. So if you run into someone who
    acts like `<feline>`, just ignore them. They’re just using you as an excuse to
    be angry at someone and feel superior.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及“X/Y问题”时，这实际上只是一个借口，用来责骂初学者是初学者。每个声称讨厌这个问题的人要么根本不写代码，要么*绝对*在学习编程时确实做过这样的事情。这就是*学习*编程的方式。您遇到问题并通过学习如何实现解决方案来摸索解决方案。因此，如果遇到像`<feline>`这样的人，只需忽略他们。他们只是借口找个人发火并感觉自己更优越。
- en: Additionally, you’ll notice that in the previous interaction not a single person
    *asked to see code*. If `<n00b>` had just shown their code, then `<feline>` could
    have recommended better ways to do that. Problem solved. I mean, assuming `<feline>`
    is actually able to code and is not just hanging out in IRC waiting to pounce
    on unsuspecting beginners asking questions.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '此外，您会注意到在上一个对话中，没有一个人*要求看代码*。如果`<n00b>`只是展示了他们的代码，那么`<feline>`就可以推荐更好的方法来解决问题。问题解决了。我是说，假设`<feline>`实际上能够编写代码，而不只是在IRC中等待着攻击毫无戒备的初学者提问。 '
- en: Rules for If-Statements
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: if语句规则
- en: 1\. Every `if`-statement must have an `else`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. 每个`if`语句必须有一个`else`。
- en: 2\. If this `else` should never run because it doesn’t make sense, then you
    must use a die function in the `else` that prints out an error message and dies,
    just like we did in the previous exercise. This will find *many* errors.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. 如果`else`部分永远不应该运行，因为这没有意义，那么你必须在`else`中使用一个die函数，打印出错误消息并终止程序，就像我们在之前的练习中所做的那样。这将找到*许多*错误。
- en: 3\. Never nest `if`-statements more than two deep and always try to do them
    one deep.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. 永远不要嵌套超过两层的`if`语句，并始终尝试将其保持一层。
- en: 4\. Treat `if`-statements like paragraphs, where each `if-elif-else` grouping
    is like a set of sentences. Put blank lines before and after.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 4\. 将`if`语句视为段落，其中每个`if-elif-else`组合就像一组句子。在其前后放置空行。
- en: 5\. Your Boolean tests should be simple. If they are complex, move their calculations
    to variables earlier in your function and use a good name for the variable.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 5\. 您的布尔测试应该简单。如果它们复杂，将它们的计算移到函数中的变量中，并为变量使用一个好的名称。
- en: If you follow these simple rules, you will start writing better code than most
    programmers. Go back to the previous exercise and see if I followed all of these
    rules. If not, fix my mistakes.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您遵循这些简单的规则，您将开始写出比大多数程序员更好的代码。回到上一个练习，看看我是否遵循了所有这些规则。如果没有，请纠正我的错误。
- en: Warning!
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 警告！
- en: Never be a slave to the rules in real life. For training purposes, you need
    to follow these rules to make your mind strong, but in real life sometimes these
    rules are just stupid. If you think a rule is stupid, try not using it.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在现实生活中永远不要成为规则的奴隶。在训练过程中，您需要遵循这些规则以增强思维能力，但在现实生活中，有时这些规则只是愚蠢的。如果您认为某个规则很愚蠢，请尝试不使用它。
- en: Rules for Loops
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 循环规则
- en: 1\. Use a `while`-loop only to loop forever, and that means probably never.
    This applies only to Python; other languages are different.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. 仅在需要永久循环时才使用`while`循环，这意味着可能永远不会用到。这仅适用于Python；其他语言不同。
- en: 2\. Use a `for`-loop for all other kinds of looping, especially if there is
    a fixed or limited number of things to loop over.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. 对于所有其他类型的循环，请使用`for`循环，特别是在需要循环的事物数量是固定或有限的情况下。
- en: Tips for Debugging
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 调试提示
- en: 1\. Do not use a “debugger.” A debugger is like doing a full-body scan on a
    sick person. You do not get any specific useful information, and you find a whole
    lot of information that doesn’t help and is just confusing.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. 不要使用“调试器”。调试器就像对生病的人进行全身扫描一样。您不会得到任何具体有用的信息，而会发现许多无用且令人困惑的信息。
- en: 2\. The best way to debug a program is to use `print` to print out the values
    of variables at points in the program to see where they go wrong.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. 调试程序的最佳方法是使用`print`打印出程序中变量的值，以查看它们出错的位置。
- en: 3\. Make sure parts of your programs work as you work on them. Do not write
    massive files of code before you try to run them. Code a little, run a little,
    fix a little.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. 确保程序的各个部分在编写时能够正常工作。不要在尝试运行之前编写大量的代码文件。少写一点，运行一点，修复一点。
- en: Homework
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 作业
- en: Now write a game similar to the one that I created in the previous exercise.
    It can be any kind of game you want in the same flavor. Spend a week on it making
    it as interesting as possible. For Study Drills, use lists, functions, and modules
    (remember those from [Exercise 13](ch13.xhtml#ch13)?) as much as possible, and
    find as many new pieces of Python as you can to make the game work.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在编写一个类似于我在上一个练习中创建的游戏。它可以是你想要的任何类型的游戏，但风格相同。花一周的时间让它尽可能有趣。在学习练习中，尽可能使用列表、函数和模块（还记得[练习13](ch13.xhtml#ch13)中的那些吗？），并找到尽可能多的新的
    Python 片段来使游戏运行。
- en: Before you start coding you must draw a map for your game. Create the rooms,
    monsters, and traps that the player must go through on paper before you code.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始编码之前，你必须为你的游戏绘制一张地图。在编码之前，先在纸上创建玩家必须经过的房间、怪物和陷阱。
- en: Once you have your map, try to code it up. If you find problems with the map,
    then adjust it and make the code match.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 有了地图后，尝试着编写代码。如果在地图中发现问题，那就调整它，使代码与之匹配。
- en: 'The best way to work on a piece of software is in small chunks like this:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件开发中，最好的方法是像这样分成小块：
- en: 1\. On a sheet of paper or an index card, write a list of tasks you need to
    complete to finish the software. This is your to-do list.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. 在一张纸上或一张索引卡上，写下你需要完成的任务列表，以完成软件开发。这就是你的待办事项清单。
- en: 2\. Pick the easiest thing you can do from your list.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. 从你的清单中选择最容易的任务。
- en: 3\. Write out English comments in your source file as a guide for how you would
    accomplish this task in your code.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. 在你的源文件中写下英文注释，作为你在代码中如何完成这个任务的指南。
- en: 4\. Write some of the code under the English comments.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 4\. 在英文注释下面写一些代码。
- en: 5\. Quickly run your script so you can see if that code worked.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 5\. 快速运行你的脚本，看看代码是否有效。
- en: 6\. Keep working in a cycle of writing some code, running it to test it, and
    fixing it until it works.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 6\. 保持在写一些代码、运行测试并修复直到它有效的循环中工作。
- en: 7\. Cross this task off your list, and then pick your next easiest task and
    repeat.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 7\. 将这个任务从你的清单上划掉，然后选择下一个最容易的任务并重复。
- en: This process will help you work on software in a methodical and consistent manner.
    As you work, update your list by removing tasks you don’t really need and adding
    ones you do.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程将帮助你以一种系统和一致的方式来开发软件。在工作时，通过删除你实际不需要的任务并添加你需要的任务来更新你的清单。
