- en: Exercise 28. Memorizing Logic
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Today is the day you start learning about logic. Up to this point you have done
    everything you possibly can reading and writing files, to the Terminal, and have
    learned quite a lot of the math capabilities of Python.
  prefs: []
  type: TYPE_NORMAL
- en: From now on, you will be learning *logic*. You won’t learn complex theories
    that academics love to study but just the simple basic logic that makes real programs
    work and that real programmers need every day.
  prefs: []
  type: TYPE_NORMAL
- en: Learning logic has to come after you do some memorization. I want you to do
    this exercise for an entire week. Do not falter. Even if you are bored out of
    your mind, keep doing it. This exercise has a set of logic tables you must memorize
    to make it easier for you to do the later exercises.
  prefs: []
  type: TYPE_NORMAL
- en: I’m warning you this won’t be fun at first. It will be downright boring and
    tedious, but this teaches you a very important skill you will need as a programmer.
    You *will* need to be able to memorize important concepts in your life. Most of
    these concepts will be exciting once you get them. You will struggle with them,
    like wrestling a squid, and then one day you will understand it. All that work
    memorizing the basics pays off big later.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a tip on how to memorize something without going insane: Do a tiny bit
    at a time throughout the day and mark down what you need to work on most. Do not
    try to sit down for two hours straight and memorize these tables. This won’t work.
    Your brain will retain only whatever you studied in the first 15 or 30 minutes
    anyway. Instead, create a bunch of index cards with each column on the left (True
    or False) on the front, and the column on the right on the back. You should then
    take them out, see the “True or False” and immediately say “True!” Keep practicing
    until you can do this.'
  prefs: []
  type: TYPE_NORMAL
- en: Once you can do that, start writing out your own truth tables each night into
    a notebook. Do not just copy them. Try to do them from memory. When you get stuck,
    glance quickly at the ones I have here to refresh your memory. Doing this will
    train your brain to remember the whole table.
  prefs: []
  type: TYPE_NORMAL
- en: Do not spend more than one week on this, because you will be applying it as
    you go.
  prefs: []
  type: TYPE_NORMAL
- en: The Truth Terms
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In Python we have the following terms (characters and phrases) for determining
    if something is “True” or “False.” Logic on a computer is all about seeing if
    some combination of these characters and some variables is True at that point
    in the program.
  prefs: []
  type: TYPE_NORMAL
- en: • `and`
  prefs: []
  type: TYPE_NORMAL
- en: • `or`
  prefs: []
  type: TYPE_NORMAL
- en: • `not`
  prefs: []
  type: TYPE_NORMAL
- en: • `!=` (not equal)
  prefs: []
  type: TYPE_NORMAL
- en: • `==` (equal)
  prefs: []
  type: TYPE_NORMAL
- en: • `>=` (greater-than-equal)
  prefs: []
  type: TYPE_NORMAL
- en: • `<=` (less-than-equal)
  prefs: []
  type: TYPE_NORMAL
- en: • `True`
  prefs: []
  type: TYPE_NORMAL
- en: • `False`
  prefs: []
  type: TYPE_NORMAL
- en: You actually have run into these characters before but maybe not the terms.
    The terms (and, or, not) actually work the way you expect them to, just like in
    English.
  prefs: []
  type: TYPE_NORMAL
- en: The Truth Tables
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We will now use these characters to make the truth tables you need to memorize.
    First is the table for `not X`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](graphics/t0104-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This is the table for `X or Y`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](graphics/t0104-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now the table for `X and Y`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](graphics/t0104-03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then we have the table for `not` combined with `or` as `not (X or Y)`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](graphics/t0105-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You should compare these tables to the `or` and `and` tables to see if you notice
    a pattern. Here’s the table for `not (X and Y)`. If you can figure out the pattern,
    you might not need to memorize them.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](graphics/t0105-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we get into equalities, which is testing if one thing is equal to another
    in various ways. First is `X != Y`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](graphics/t0105-03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally we have `X == Y`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](graphics/t0105-04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now use these tables to write up your own cards and spend the week memorizing
    them. Remember though, there is no failing in this book, just trying as hard as
    you can each day, and then a *little* bit more.
  prefs: []
  type: TYPE_NORMAL
- en: Common Student Questions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Can’t I just learn the concepts behind Boolean algebra and not memorize this?**
    Sure, you can do that, but then you’ll have to constantly go through the rules
    for Boolean algebra while you code. If you memorize these first, not only does
    it build your memorization skills, but it also makes these operations natural.
    After that, the concept of Boolean algebra is easy. But do whatever works for
    you.'
  prefs: []
  type: TYPE_NORMAL
